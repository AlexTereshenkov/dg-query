env:
  BUILDKITE_ANALYTICS_TOKEN: $(buildkite-agent secret get ANALYTICS_TOKEN)

steps:
  - label: ":bazel: Build"
    commands:
      
      - "echo '--- Prepare environment'"
      - sudo apt-get install wget tree libdatetime-perl libdatetime-format-dateparse-perl libcapture-tiny-perl -y
      - wget https://github.com/bazelbuild/bazelisk/releases/download/v1.20.0/bazelisk-linux-amd64
      - chmod +x bazelisk-linux-amd64
      - sudo mv bazelisk-linux-amd64 /usr/local/bin/bazel
      
      - "echo '--- Build'"
      - bazel --version
      - bazel build //...
      - ls bazel-*
      - echo "common --show_timestamps" > .bazelrc.ci
      
      - "echo '--- Static checks'"
      - "echo 'Gazelle'"
      - bazel run //:gazelle -- -mode=diff
      - "echo 'Buildifier'"
      - bazel run //:buildifier-check
      - "echo 'gofmt'"
      # getting exit code 1 despite not needing to format anything, 
      # so running the gofmt in "check" mode and not inspecting the exit code.
      - bazel run @go_sdk//:bin/gofmt -- -s -l .

      - "echo '--- Run'"
      - bazel build //... && bazel-bin/dg-query_/dg-query dependencies --dg="examples/dg-real.json" foo.py spam.py
      
      - "echo '--- Test unit'"
      - bazel test --test_tag_filters=unit --test_output=all --test_summary=detailed //... 

      - "echo '--- Test integration'"
      - bazel test --test_tag_filters=integration --test_output=all --test_summary=detailed //... 

      - "echo '--- Test performance'"
      - bazel test --test_tag_filters=performance --test_output=all --test_summary=detailed --runs_per_test=10 //... 
      - cp bazel-testlogs/tests/dg-query_test/test.xml test.xml

      - "echo '--- Code coverage'"
      - bazel coverage //... --combined_report=lcov && bazel run //:run_coverage_with_genhtml 
    
      - "echo '--- Release binary with a stamp'"
      - bazel build //:dg-query --stamp --workspace_status_command="build-support/workspace-status.sh"
      - bazel-bin/dg-query_/dg-query | grep "Git revision"

    
    plugins:
      - test-collector#v1.10.2:
          files: "test.xml"
          format: "junit"
  
    artifact_paths: 
      - bazel-testlogs/tests/dg-query_test/test.xml

  - label: ":bazel: Build in Docker"
    commands:
      - "echo '--- Prepare environment'"
      - sudo apt-get install wget
      - wget https://github.com/bazelbuild/bazelisk/releases/download/v1.20.0/bazelisk-linux-amd64
      - chmod +x bazelisk-linux-amd64
      - sudo mv bazelisk-linux-amd64 /usr/local/bin/bazel
      
      - "echo '--- Build'"
      - bazel --version
      # `--load` ensures that the image built is loaded into the local Docker environment, 
      # making it immediately available to run or reference by tag; otherwise, the image 
      # will only exist in Docker's build cache.
      - docker build -t go-build-env -f platforms/Dockerfile --load .
      - docker image ls
      - bazel build //... --spawn_strategy=docker --experimental_enable_docker_sandbox --platforms="//platforms:docker"
      - bazel test //...  --spawn_strategy=docker --experimental_enable_docker_sandbox --platforms="//platforms:docker"

  - label: ":go: Build"
    commands:
        - .buildkite/build-go.sh

    artifact_paths: 
      - dist/coverage.html
