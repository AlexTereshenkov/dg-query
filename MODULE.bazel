module(
    name = "workspace",
    repo_name = "com_github_alextereshenkov_dgquery",
)

bazel_dep(name = "rules_python", version = "1.3.0")
bazel_dep(name = "rules_go", version = "0.53.0")
bazel_dep(name = "rules_shell", version = "0.4.0")
bazel_dep(name = "gazelle", version = "0.42.0")
bazel_dep(name = "buildifier_prebuilt", version = "8.0.3")
bazel_dep(name = "lcov", version = "2.3")
bazel_dep(name = "platforms", version = "0.0.11")

# a Python toolchain is a dependency for a build action that is used to run tests with code
# coverage enabled; the build in Buildkite runs under root inside a Docker container, but the
# toolchain doesn't like that; see https://github.com/bazelbuild/rules_python/pull/713
python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    configure_coverage_tool = False,
    ignore_root_user_error = True,
    python_version = "3.11",
)

# this is to manage third-party dependencies
go_deps = use_extension("@gazelle//:extensions.bzl", "go_deps")
go_deps.from_file(go_mod = "//:go.mod")

# https://github.com/bazel-contrib/rules_go/blob/master/docs/go/core/bzlmod.md
go_sdk = use_extension("@rules_go//go:extensions.bzl", "go_sdk")

# using the same version as in `go.mod`
go_sdk.download(version = "1.22.0")

# this is to enable nogo static analysis checker and being able to run arbitrary Go commands
go_sdk.nogo(nogo = "//:nogo")

# all *direct* Go dependencies of the module have to be listed explicitly here
use_repo(
    go_deps,
    "com_github_spf13_cast",
    "com_github_spf13_cobra",
    "com_github_stretchr_testify",
)

# one cannot register both Windows and Linux platforms here because it means Bazel will
# attempt to download/setup Go toolchains for both platforms (e.g. running Bazel on
# Windows would attempt to download Linux Go SDK which would lead to build failure);
# the registration of platforms happens in the `.bazelrc` file instead, so for Windows
# builds, add `--config=windows` and for Linux Docker builds, add `--config=docker`.

# to add support for `--spawn_strategy=docker`
# register_execution_platforms(
#     "//platforms:docker",
#     "//platforms:windows"
# )
